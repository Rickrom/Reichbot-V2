const snekfetch = require("snekfetch");

module.exports = class DiscordBots {
	
	constructor(options) {
		this.token = options.token;
		this.client = options.clientID;
	}

	grabUser(user) {
		return this._get(`https://bots.discord.pw/api/users/${user}`);
	}

	grabBot(bot) {
		return this._get(`https://bots.discord.pw/api/bots/${bot}`);
	}

	grabBotsList() {
		return this._get(`https://bots.discord.pw/api/bots`);
	}

	grabStats(bot) {
		return this._get(`https://bots.discord.pw/api/bots/${bot}/stats`)
	}

	postStats(guildCount) {
		return this._post(guildCount, `https://bots.discord.pw/api/bots/${this.client}/stats`)
	}

	_post(guildCount, base) {
    	return new Promise((resolve, reject) => {
        	snekfetch.post(base)
        		.set("Authorization", this.token)
        		.set("User-Agent", "DBots Library ( https://npmjs.org/package/dbots ) - Created by Doh")
        		.send({server_count : parseInt(guildCount)})
        		.then(res => {
            		if (res.status !== 200) return reject(res);
            		else return resolve(`Successfully posted ${guildCount} guilds to Discord Bots List.`);
        		}).catch((err) => {
            		reject(err);
       			});

		});	
	}

	_get(base) {
    	return new Promise((resolve, reject) => {
        	snekfetch.get(base)
        		.set("Authorization", this.token)
        		.set("User-Agent", "DBots Library ( https://npmjs.org/package/dbots ) - Created by Doh")
        		.then(res => {
            		if (res.status !== 200) return reject(res);
            		else return resolve(res.body);
        		}).catch((err) => {
            		reject(err);
       			});

		});	
	}

}